{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _generated = require(\"../generated\");\nvar _default = createTypeAnnotationBasedOnTypeof;\nexports.default = _default;\nfunction createTypeAnnotationBasedOnTypeof(type) {\n  switch (type) {\n    case \"string\":\n      return (0, _generated.stringTypeAnnotation)();\n    case \"number\":\n      return (0, _generated.numberTypeAnnotation)();\n    case \"undefined\":\n      return (0, _generated.voidTypeAnnotation)();\n    case \"boolean\":\n      return (0, _generated.booleanTypeAnnotation)();\n    case \"function\":\n      return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\"Function\"));\n    case \"object\":\n      return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\"Object\"));\n    case \"symbol\":\n      return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)(\"Symbol\"));\n    case \"bigint\":\n      return (0, _generated.anyTypeAnnotation)();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAQsB,eAGPA,iCAAiC;AAAAC;AAchD,SAASD,iCAAiC,CAACE,IAAY,EAAc;EACnE,QAAQA,IAAI;IACV,KAAK,QAAQ;MACX,OAAO,mCAAoB,GAAE;IAC/B,KAAK,QAAQ;MACX,OAAO,mCAAoB,GAAE;IAC/B,KAAK,WAAW;MACd,OAAO,iCAAkB,GAAE;IAC7B,KAAK,SAAS;MACZ,OAAO,oCAAqB,GAAE;IAChC,KAAK,UAAU;MACb,OAAO,oCAAqB,EAAC,yBAAU,EAAC,UAAU,CAAC,CAAC;IACtD,KAAK,QAAQ;MACX,OAAO,oCAAqB,EAAC,yBAAU,EAAC,QAAQ,CAAC,CAAC;IACpD,KAAK,QAAQ;MACX,OAAO,oCAAqB,EAAC,yBAAU,EAAC,QAAQ,CAAC,CAAC;IACpD,KAAK,QAAQ;MAGX,OAAO,gCAAiB,GAAE;EAAA;EAE9B,MAAM,IAAIC,KAAK,CAAC,wBAAwB,GAAGD,IAAI,CAAC;AAClD","names":["createTypeAnnotationBasedOnTypeof","exports","type","Error"],"sources":["/home/charlotte/WebApplicationProject/node_modules/@babel/types/src/builders/flow/createTypeAnnotationBasedOnTypeof.ts"],"sourcesContent":["import {\n  anyTypeAnnotation,\n  stringTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation,\n  booleanTypeAnnotation,\n  genericTypeAnnotation,\n  identifier,\n} from \"../generated\";\nimport type * as t from \"../..\";\n\nexport default createTypeAnnotationBasedOnTypeof as {\n  (type: \"string\"): t.StringTypeAnnotation;\n  (type: \"number\"): t.NumberTypeAnnotation;\n  (type: \"undefined\"): t.VoidTypeAnnotation;\n  (type: \"boolean\"): t.BooleanTypeAnnotation;\n  (type: \"function\"): t.GenericTypeAnnotation;\n  (type: \"object\"): t.GenericTypeAnnotation;\n  (type: \"symbol\"): t.GenericTypeAnnotation;\n  (type: \"bigint\"): t.AnyTypeAnnotation;\n};\n\n/**\n * Create a type annotation based on typeof expression.\n */\nfunction createTypeAnnotationBasedOnTypeof(type: string): t.FlowType {\n  switch (type) {\n    case \"string\":\n      return stringTypeAnnotation();\n    case \"number\":\n      return numberTypeAnnotation();\n    case \"undefined\":\n      return voidTypeAnnotation();\n    case \"boolean\":\n      return booleanTypeAnnotation();\n    case \"function\":\n      return genericTypeAnnotation(identifier(\"Function\"));\n    case \"object\":\n      return genericTypeAnnotation(identifier(\"Object\"));\n    case \"symbol\":\n      return genericTypeAnnotation(identifier(\"Symbol\"));\n    case \"bigint\":\n      // todo: use BigInt annotation when Flow supports BigInt\n      // https://github.com/facebook/flow/issues/6639\n      return anyTypeAnnotation();\n  }\n  throw new Error(\"Invalid typeof value: \" + type);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}