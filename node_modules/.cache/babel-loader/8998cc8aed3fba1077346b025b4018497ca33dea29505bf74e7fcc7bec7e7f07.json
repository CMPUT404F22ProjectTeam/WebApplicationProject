{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toKeyAlias;\nvar _generated = require(\"../validators/generated\");\nvar _cloneNode = require(\"../clone/cloneNode\");\nvar _removePropertiesDeep = require(\"../modifications/removePropertiesDeep\");\nfunction toKeyAlias(node) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node.key;\n  let alias;\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if ((0, _generated.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _generated.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n  return alias;\n}\ntoKeyAlias.uid = 0;\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAGe,SAASA,UAAU,CAChCC,IAA2B,EAEnB;EAAA,IADRC,GAAW,uEAAGD,IAAI,CAACC,GAAG;EAEtB,IAAIC,KAAK;EAGT,IAAIF,IAAI,CAACG,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOJ,UAAU,CAACK,SAAS,EAAE,GAAG,EAAE;EACpC,CAAC,MAAM,IAAI,2BAAY,EAACH,GAAG,CAAC,EAAE;IAC5BC,KAAK,GAAGD,GAAG,CAACI,IAAI;EAClB,CAAC,MAAM,IAAI,8BAAe,EAACJ,GAAG,CAAC,EAAE;IAC/BC,KAAK,GAAGI,IAAI,CAACC,SAAS,CAACN,GAAG,CAACO,KAAK,CAAC;EACnC,CAAC,MAAM;IACLN,KAAK,GAAGI,IAAI,CAACC,SAAS,CAAC,iCAAoB,EAAC,sBAAS,EAACN,GAAG,CAAC,CAAC,CAAC;EAC9D;EAGA,IAAID,IAAI,CAACS,QAAQ,EAAE;IACjBP,KAAK,GAAI,IAAGA,KAAM,GAAE;EACtB;EAGA,IAAIF,IAAI,CAACU,MAAM,EAAE;IACfR,KAAK,GAAI,UAASA,KAAM,EAAC;EAC3B;EAEA,OAAOA,KAAK;AACd;AAEAH,UAAU,CAACY,GAAG,GAAG,CAAC;AAElBZ,UAAU,CAACK,SAAS,GAAG,YAAY;EACjC,IAAIL,UAAU,CAACY,GAAG,IAAIC,MAAM,CAACC,gBAAgB,EAAE;IAC7C,OAAQd,UAAU,CAACY,GAAG,GAAG,CAAC;EAC5B,CAAC,MAAM;IACL,OAAOZ,UAAU,CAACY,GAAG,EAAE;EACzB;AACF,CAAC","names":["toKeyAlias","node","key","alias","kind","increment","name","JSON","stringify","value","computed","static","uid","Number","MAX_SAFE_INTEGER"],"sources":["/home/charlotte/WebApplicationProject/node_modules/@babel/types/src/converters/toKeyAlias.ts"],"sourcesContent":["import { isIdentifier, isStringLiteral } from \"../validators/generated\";\nimport cloneNode from \"../clone/cloneNode\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep\";\nimport type * as t from \"..\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}