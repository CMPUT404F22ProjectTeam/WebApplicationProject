{"ast":null,"code":"/**\n * Get request with JWT token\n * @param {string} uri URL to get\n * @returns data from the response\n */\nexport const get = uri => {\n  let username = 'charlotte';\n  let password = '12345678';\n  let headers = new Headers();\n  headers.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\n  return fetch(uri, {\n    method: 'GET',\n    headers: headers\n  }).then(async response => {\n    if (response.ok) {\n      return response.json();\n    }\n    throw new Error((await response.json()).message);\n  });\n};","map":{"version":3,"names":["get","uri","username","password","headers","Headers","set","base64","encode","fetch","method","then","response","ok","json","Error","message"],"sources":["/home/charlotte/WebApplicationProject/src/components/Api.jsx"],"sourcesContent":["/**\n * Get request with JWT token\n * @param {string} uri URL to get\n * @returns data from the response\n */\nexport const get = (uri) => {\n\n    let username = 'charlotte';\n    let password = '12345678';\n    let headers = new Headers();\n    headers.set('Authorization', 'Basic ' + base64.encode(username + \":\" + password));\n    return fetch(uri, {\n        method: 'GET',\n        headers: headers,\n    }).then(async (response) => {\n        if (response.ok) {\n            return response.json()\n        }\n        throw new Error((await response.json()).message)\n    })\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,GAAG,GAAIC,GAAG,IAAK;EAExB,IAAIC,QAAQ,GAAG,WAAW;EAC1B,IAAIC,QAAQ,GAAG,UAAU;EACzB,IAAIC,OAAO,GAAG,IAAIC,OAAO,EAAE;EAC3BD,OAAO,CAACE,GAAG,CAAC,eAAe,EAAE,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACN,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC,CAAC;EACjF,OAAOM,KAAK,CAACR,GAAG,EAAE;IACdS,MAAM,EAAE,KAAK;IACbN,OAAO,EAAEA;EACb,CAAC,CAAC,CAACO,IAAI,CAAC,MAAOC,QAAQ,IAAK;IACxB,IAAIA,QAAQ,CAACC,EAAE,EAAE;MACb,OAAOD,QAAQ,CAACE,IAAI,EAAE;IAC1B;IACA,MAAM,IAAIC,KAAK,CAAC,CAAC,MAAMH,QAAQ,CAACE,IAAI,EAAE,EAAEE,OAAO,CAAC;EACpD,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}