{"ast":null,"code":"import { getUserAgent } from 'universal-user-agent';\nimport { Collection } from 'before-after-hook';\nimport { request } from '@octokit/request';\nimport { withCustomRequest } from '@octokit/graphql';\nimport { createTokenAuth } from '@octokit/auth-token';\nconst VERSION = \"4.1.0\";\nclass Octokit {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const hook = new Collection();\n    const requestDefaults = {\n      baseUrl: request.endpoint.DEFAULTS.baseUrl,\n      headers: {},\n      request: Object.assign({}, options.request, {\n        // @ts-ignore internal usage only, no need to type\n        hook: hook.bind(null, \"request\")\n      }),\n      mediaType: {\n        previews: [],\n        format: \"\"\n      }\n    };\n    // prepend default user agent with `options.userAgent` if set\n    requestDefaults.headers[\"user-agent\"] = [options.userAgent, `octokit-core.js/${VERSION} ${getUserAgent()}`].filter(Boolean).join(\" \");\n    if (options.baseUrl) {\n      requestDefaults.baseUrl = options.baseUrl;\n    }\n    if (options.previews) {\n      requestDefaults.mediaType.previews = options.previews;\n    }\n    if (options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = options.timeZone;\n    }\n    this.request = request.defaults(requestDefaults);\n    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n    this.log = Object.assign({\n      debug: () => {},\n      info: () => {},\n      warn: console.warn.bind(console),\n      error: console.error.bind(console)\n    }, options.log);\n    this.hook = hook;\n    // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n    //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n    // (2) If only `options.auth` is set, use the default token authentication strategy.\n    // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n    // TODO: type `options.auth` based on `options.authStrategy`.\n    if (!options.authStrategy) {\n      if (!options.auth) {\n        // (1)\n        this.auth = async () => ({\n          type: \"unauthenticated\"\n        });\n      } else {\n        // (2)\n        const auth = createTokenAuth(options.auth);\n        // @ts-ignore  ¯\\_(ツ)_/¯\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      const {\n        authStrategy,\n        ...otherOptions\n      } = options;\n      const auth = authStrategy(Object.assign({\n        request: this.request,\n        log: this.log,\n        // we pass the current octokit instance as well as its constructor options\n        // to allow for authentication strategies that return a new octokit instance\n        // that shares the same internal state as the current one. The original\n        // requirement for this was the \"event-octokit\" authentication strategy\n        // of https://github.com/probot/octokit-auth-probot.\n        octokit: this,\n        octokitOptions: otherOptions\n      }, options.auth));\n      // @ts-ignore  ¯\\_(ツ)_/¯\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    }\n    // apply plugins\n    // https://stackoverflow.com/a/16345172\n    const classConstructor = this.constructor;\n    classConstructor.plugins.forEach(plugin => {\n      Object.assign(this, plugin(this, options));\n    });\n  }\n  static defaults(defaults) {\n    const OctokitWithDefaults = class extends this {\n      constructor() {\n        const options = (arguments.length <= 0 ? undefined : arguments[0]) || {};\n        if (typeof defaults === \"function\") {\n          super(defaults(options));\n          return;\n        }\n        super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent ? {\n          userAgent: `${options.userAgent} ${defaults.userAgent}`\n        } : null));\n      }\n    };\n    return OctokitWithDefaults;\n  }\n  /**\n   * Attach a plugin (or many) to your Octokit instance.\n   *\n   * @example\n   * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n   */\n  static plugin() {\n    var _a;\n    const currentPlugins = this.plugins;\n    for (var _len = arguments.length, newPlugins = new Array(_len), _key = 0; _key < _len; _key++) {\n      newPlugins[_key] = arguments[_key];\n    }\n    const NewOctokit = (_a = class extends this {}, _a.plugins = currentPlugins.concat(newPlugins.filter(plugin => !currentPlugins.includes(plugin))), _a);\n    return NewOctokit;\n  }\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\nexport { Octokit };","map":{"version":3,"mappings":"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","names":["VERSION","Octokit","constructor","options","hook","Collection","requestDefaults","baseUrl","request","endpoint","DEFAULTS","headers","Object","assign","bind","mediaType","previews","format","userAgent","getUserAgent","filter","Boolean","join","timeZone","defaults","graphql","withCustomRequest","log","debug","info","warn","console","error","authStrategy","auth","type","createTokenAuth","wrap","otherOptions","octokit","octokitOptions","classConstructor","plugins","forEach","plugin","OctokitWithDefaults","_a","currentPlugins","newPlugins","NewOctokit","concat","includes"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/@octokit/core/dist-src/version.js","/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/@octokit/core/dist-src/index.js"],"sourcesContent":["export const VERSION = \"4.1.0\";\n","import { getUserAgent } from \"universal-user-agent\";\nimport { Collection } from \"before-after-hook\";\nimport { request } from \"@octokit/request\";\nimport { withCustomRequest } from \"@octokit/graphql\";\nimport { createTokenAuth } from \"@octokit/auth-token\";\nimport { VERSION } from \"./version\";\nexport class Octokit {\n    constructor(options = {}) {\n        const hook = new Collection();\n        const requestDefaults = {\n            baseUrl: request.endpoint.DEFAULTS.baseUrl,\n            headers: {},\n            request: Object.assign({}, options.request, {\n                // @ts-ignore internal usage only, no need to type\n                hook: hook.bind(null, \"request\"),\n            }),\n            mediaType: {\n                previews: [],\n                format: \"\",\n            },\n        };\n        // prepend default user agent with `options.userAgent` if set\n        requestDefaults.headers[\"user-agent\"] = [\n            options.userAgent,\n            `octokit-core.js/${VERSION} ${getUserAgent()}`,\n        ]\n            .filter(Boolean)\n            .join(\" \");\n        if (options.baseUrl) {\n            requestDefaults.baseUrl = options.baseUrl;\n        }\n        if (options.previews) {\n            requestDefaults.mediaType.previews = options.previews;\n        }\n        if (options.timeZone) {\n            requestDefaults.headers[\"time-zone\"] = options.timeZone;\n        }\n        this.request = request.defaults(requestDefaults);\n        this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n        this.log = Object.assign({\n            debug: () => { },\n            info: () => { },\n            warn: console.warn.bind(console),\n            error: console.error.bind(console),\n        }, options.log);\n        this.hook = hook;\n        // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n        //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n        // (2) If only `options.auth` is set, use the default token authentication strategy.\n        // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n        // TODO: type `options.auth` based on `options.authStrategy`.\n        if (!options.authStrategy) {\n            if (!options.auth) {\n                // (1)\n                this.auth = async () => ({\n                    type: \"unauthenticated\",\n                });\n            }\n            else {\n                // (2)\n                const auth = createTokenAuth(options.auth);\n                // @ts-ignore  ¯\\_(ツ)_/¯\n                hook.wrap(\"request\", auth.hook);\n                this.auth = auth;\n            }\n        }\n        else {\n            const { authStrategy, ...otherOptions } = options;\n            const auth = authStrategy(Object.assign({\n                request: this.request,\n                log: this.log,\n                // we pass the current octokit instance as well as its constructor options\n                // to allow for authentication strategies that return a new octokit instance\n                // that shares the same internal state as the current one. The original\n                // requirement for this was the \"event-octokit\" authentication strategy\n                // of https://github.com/probot/octokit-auth-probot.\n                octokit: this,\n                octokitOptions: otherOptions,\n            }, options.auth));\n            // @ts-ignore  ¯\\_(ツ)_/¯\n            hook.wrap(\"request\", auth.hook);\n            this.auth = auth;\n        }\n        // apply plugins\n        // https://stackoverflow.com/a/16345172\n        const classConstructor = this.constructor;\n        classConstructor.plugins.forEach((plugin) => {\n            Object.assign(this, plugin(this, options));\n        });\n    }\n    static defaults(defaults) {\n        const OctokitWithDefaults = class extends this {\n            constructor(...args) {\n                const options = args[0] || {};\n                if (typeof defaults === \"function\") {\n                    super(defaults(options));\n                    return;\n                }\n                super(Object.assign({}, defaults, options, options.userAgent && defaults.userAgent\n                    ? {\n                        userAgent: `${options.userAgent} ${defaults.userAgent}`,\n                    }\n                    : null));\n            }\n        };\n        return OctokitWithDefaults;\n    }\n    /**\n     * Attach a plugin (or many) to your Octokit instance.\n     *\n     * @example\n     * const API = Octokit.plugin(plugin1, plugin2, plugin3, ...)\n     */\n    static plugin(...newPlugins) {\n        var _a;\n        const currentPlugins = this.plugins;\n        const NewOctokit = (_a = class extends this {\n            },\n            _a.plugins = currentPlugins.concat(newPlugins.filter((plugin) => !currentPlugins.includes(plugin))),\n            _a);\n        return NewOctokit;\n    }\n}\nOctokit.VERSION = VERSION;\nOctokit.plugins = [];\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}