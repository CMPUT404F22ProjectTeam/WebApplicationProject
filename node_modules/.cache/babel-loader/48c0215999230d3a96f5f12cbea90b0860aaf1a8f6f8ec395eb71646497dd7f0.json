{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.asterisk || code === codes.dash || code === codes.underscore, 'expected `*`, `-`, or `_`');\n    effects.enter(types.thematicBreak);\n    marker = code;\n    return atBreak(code);\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence);\n      return sequence(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, types.whitespace)(code);\n    }\n    if (size < constants.thematicBreakMarkerCountMin || code !== codes.eof && !markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.exit(types.thematicBreak);\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(types.thematicBreakSequence);\n    return atBreak(code);\n  }\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownLineEnding","markdownSpace","codes","constants","types","thematicBreak","name","tokenize","tokenizeThematicBreak","effects","nok","size","marker","start","code","asterisk","dash","underscore","enter","atBreak","thematicBreakSequence","sequence","whitespace","thematicBreakMarkerCountMin","eof","exit","consume"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/micromark-core-commonmark/dev/lib/thematic-break.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Code} Code\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding, markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0\n  /** @type {NonNullable<Code>} */\n  let marker\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(\n      code === codes.asterisk ||\n        code === codes.dash ||\n        code === codes.underscore,\n      'expected `*`, `-`, or `_`'\n    )\n\n    effects.enter(types.thematicBreak)\n    marker = code\n    return atBreak(code)\n  }\n\n  /** @type {State} */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(types.thematicBreakSequence)\n      return sequence(code)\n    }\n\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, types.whitespace)(code)\n    }\n\n    if (\n      size < constants.thematicBreakMarkerCountMin ||\n      (code !== codes.eof && !markdownLineEnding(code))\n    ) {\n      return nok(code)\n    }\n\n    effects.exit(types.thematicBreak)\n    return ok(code)\n  }\n\n  /** @type {State} */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code)\n      size++\n      return sequence\n    }\n\n    effects.exit(types.thematicBreakSequence)\n    return atBreak(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,YAAY,QAAO,yBAAyB;AACpD,SAAQC,kBAAkB,EAAEC,aAAa,QAAO,0BAA0B;AAC1E,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,SAAS,QAAO,oCAAoC;AAC5D,SAAQC,KAAK,QAAO,gCAAgC;;AAEpD;AACA,OAAO,MAAMC,aAAa,GAAG;EAC3BC,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA,SAASA,qBAAqB,CAACC,OAAO,EAAEZ,EAAE,EAAEa,GAAG,EAAE;EAC/C,IAAIC,IAAI,GAAG,CAAC;EACZ;EACA,IAAIC,MAAM;EAEV,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBhB,MAAM,CACJgB,IAAI,KAAKZ,KAAK,CAACa,QAAQ,IACrBD,IAAI,KAAKZ,KAAK,CAACc,IAAI,IACnBF,IAAI,KAAKZ,KAAK,CAACe,UAAU,EAC3B,2BAA2B,CAC5B;IAEDR,OAAO,CAACS,KAAK,CAACd,KAAK,CAACC,aAAa,CAAC;IAClCO,MAAM,GAAGE,IAAI;IACb,OAAOK,OAAO,CAACL,IAAI,CAAC;EACtB;;EAEA;EACA,SAASK,OAAO,CAACL,IAAI,EAAE;IACrB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBH,OAAO,CAACS,KAAK,CAACd,KAAK,CAACgB,qBAAqB,CAAC;MAC1C,OAAOC,QAAQ,CAACP,IAAI,CAAC;IACvB;IAEA,IAAIb,aAAa,CAACa,IAAI,CAAC,EAAE;MACvB,OAAOf,YAAY,CAACU,OAAO,EAAEU,OAAO,EAAEf,KAAK,CAACkB,UAAU,CAAC,CAACR,IAAI,CAAC;IAC/D;IAEA,IACEH,IAAI,GAAGR,SAAS,CAACoB,2BAA2B,IAC3CT,IAAI,KAAKZ,KAAK,CAACsB,GAAG,IAAI,CAACxB,kBAAkB,CAACc,IAAI,CAAE,EACjD;MACA,OAAOJ,GAAG,CAACI,IAAI,CAAC;IAClB;IAEAL,OAAO,CAACgB,IAAI,CAACrB,KAAK,CAACC,aAAa,CAAC;IACjC,OAAOR,EAAE,CAACiB,IAAI,CAAC;EACjB;;EAEA;EACA,SAASO,QAAQ,CAACP,IAAI,EAAE;IACtB,IAAIA,IAAI,KAAKF,MAAM,EAAE;MACnBH,OAAO,CAACiB,OAAO,CAACZ,IAAI,CAAC;MACrBH,IAAI,EAAE;MACN,OAAOU,QAAQ;IACjB;IAEAZ,OAAO,CAACgB,IAAI,CAACrB,KAAK,CAACgB,qBAAqB,CAAC;IACzC,OAAOD,OAAO,CAACL,IAAI,CAAC;EACtB;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}