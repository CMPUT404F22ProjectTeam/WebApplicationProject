{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst indentedContent = {\n  tokenize: tokenizeIndentedContent,\n  partial: true\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(types.codeIndented);\n    return factorySpace(effects, afterStartPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n\n  /** @type {State} */\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? afterPrefix(code) : nok(code);\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    if (code === codes.eof) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code);\n    }\n    effects.enter(types.codeFlowValue);\n    return content(code);\n  }\n\n  /** @type {State} */\n  function content(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue);\n      return afterPrefix(code);\n    }\n    effects.consume(code);\n    return content;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented);\n    return ok(code);\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding);\n      effects.consume(code);\n      effects.exit(types.lineEnding);\n      return start;\n    }\n    return factorySpace(effects, afterPrefix, types.linePrefix, constants.tabSize + 1)(code);\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize ? ok(code) : markdownLineEnding(code) ? start(code) : nok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","codes","constants","types","codeIndented","name","tokenize","tokenizeCodeIndented","indentedContent","tokenizeIndentedContent","partial","effects","ok","nok","self","start","code","enter","afterStartPrefix","linePrefix","tabSize","tail","events","length","type","sliceSerialize","afterPrefix","eof","after","attempt","codeFlowValue","content","exit","consume","parser","lazy","now","line","lineEnding"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/micromark-core-commonmark/dev/lib/code-indented.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n}\n\n/** @type {Construct} */\nconst indentedContent = {tokenize: tokenizeIndentedContent, partial: true}\n\n/** @type {Tokenizer} */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(types.codeIndented)\n    return factorySpace(\n      effects,\n      afterStartPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function afterStartPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? afterPrefix(code)\n      : nok(code)\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    if (code === codes.eof) {\n      return after(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      return effects.attempt(indentedContent, afterPrefix, after)(code)\n    }\n\n    effects.enter(types.codeFlowValue)\n    return content(code)\n  }\n\n  /** @type {State} */\n  function content(code) {\n    if (code === codes.eof || markdownLineEnding(code)) {\n      effects.exit(types.codeFlowValue)\n      return afterPrefix(code)\n    }\n\n    effects.consume(code)\n    return content\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(types.codeIndented)\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeIndentedContent(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code)\n    }\n\n    if (markdownLineEnding(code)) {\n      effects.enter(types.lineEnding)\n      effects.consume(code)\n      effects.exit(types.lineEnding)\n      return start\n    }\n\n    return factorySpace(\n      effects,\n      afterPrefix,\n      types.linePrefix,\n      constants.tabSize + 1\n    )(code)\n  }\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === types.linePrefix &&\n      tail[2].sliceSerialize(tail[1], true).length >= constants.tabSize\n      ? ok(code)\n      : markdownLineEnding(code)\n      ? start(code)\n      : nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}