{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isImmutable;\nvar _isType = require(\"./isType\");\nvar _generated = require(\"./generated\");\nfunction isImmutable(node) {\n  if ((0, _isType.default)(node.type, \"Immutable\")) return true;\n  if ((0, _generated.isIdentifier)(node)) {\n    if (node.name === \"undefined\") {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  return false;\n}","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAMe,SAASA,WAAW,CAACC,IAAY,EAAW;EACzD,IAAI,mBAAM,EAACA,IAAI,CAACC,IAAI,EAAE,WAAW,CAAC,EAAE,OAAO,IAAI;EAE/C,IAAI,2BAAY,EAACD,IAAI,CAAC,EAAE;IACtB,IAAIA,IAAI,CAACE,IAAI,KAAK,WAAW,EAAE;MAE7B,OAAO,IAAI;IACb,CAAC,MAAM;MAEL,OAAO,KAAK;IACd;EACF;EAEA,OAAO,KAAK;AACd","names":["isImmutable","node","type","name"],"sources":["/home/charlotte/WebApplicationProject/node_modules/@babel/types/src/validators/isImmutable.ts"],"sourcesContent":["import isType from \"./isType\";\nimport { isIdentifier } from \"./generated\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `node` is definitely immutable.\n */\nexport default function isImmutable(node: t.Node): boolean {\n  if (isType(node.type, \"Immutable\")) return true;\n\n  if (isIdentifier(node)) {\n    if (node.name === \"undefined\") {\n      // immutable!\n      return true;\n    } else {\n      // no idea...\n      return false;\n    }\n  }\n\n  return false;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}