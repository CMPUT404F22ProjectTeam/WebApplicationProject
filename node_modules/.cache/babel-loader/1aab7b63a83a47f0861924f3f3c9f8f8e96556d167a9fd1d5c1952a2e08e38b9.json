{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (code === codes.greaterThan) {\n      const state = self.containerState;\n      assert(state, 'expected `containerState` to be defined in container');\n      if (!state.open) {\n        effects.enter(types.blockQuote, {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(types.blockQuotePrefix);\n      effects.enter(types.blockQuoteMarker);\n      effects.consume(code);\n      effects.exit(types.blockQuoteMarker);\n      return after;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.blockQuotePrefixWhitespace);\n      effects.consume(code);\n      effects.exit(types.blockQuotePrefixWhitespace);\n      effects.exit(types.blockQuotePrefix);\n      return ok;\n    }\n    effects.exit(types.blockQuotePrefix);\n    return ok(code);\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(effects, effects.attempt(blockQuote, ok, nok), types.linePrefix, this.parser.constructs.disable.null.includes('codeIndented') ? undefined : constants.tabSize);\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(types.blockQuote);\n}","map":{"version":3,"names":["ok","assert","factorySpace","markdownSpace","codes","constants","types","blockQuote","name","tokenize","tokenizeBlockQuoteStart","continuation","tokenizeBlockQuoteContinuation","exit","effects","nok","self","start","code","greaterThan","state","containerState","open","enter","_container","blockQuotePrefix","blockQuoteMarker","consume","after","blockQuotePrefixWhitespace","attempt","linePrefix","parser","constructs","disable","null","includes","undefined","tabSize"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/micromark-core-commonmark/dev/lib/block-quote.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/** @type {Construct} */\nexport const blockQuote = {\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart,\n  continuation: {tokenize: tokenizeBlockQuoteContinuation},\n  exit\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    if (code === codes.greaterThan) {\n      const state = self.containerState\n\n      assert(state, 'expected `containerState` to be defined in container')\n\n      if (!state.open) {\n        effects.enter(types.blockQuote, {_container: true})\n        state.open = true\n      }\n\n      effects.enter(types.blockQuotePrefix)\n      effects.enter(types.blockQuoteMarker)\n      effects.consume(code)\n      effects.exit(types.blockQuoteMarker)\n      return after\n    }\n\n    return nok(code)\n  }\n\n  /** @type {State} */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(types.blockQuotePrefixWhitespace)\n      effects.consume(code)\n      effects.exit(types.blockQuotePrefixWhitespace)\n      effects.exit(types.blockQuotePrefix)\n      return ok\n    }\n\n    effects.exit(types.blockQuotePrefix)\n    return ok(code)\n  }\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  return factorySpace(\n    effects,\n    effects.attempt(blockQuote, ok, nok),\n    types.linePrefix,\n    this.parser.constructs.disable.null.includes('codeIndented')\n      ? undefined\n      : constants.tabSize\n  )\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(types.blockQuote)\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,YAAY,QAAO,yBAAyB;AACpD,SAAQC,aAAa,QAAO,0BAA0B;AACtD,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,SAAS,QAAO,oCAAoC;AAC5D,SAAQC,KAAK,QAAO,gCAAgC;;AAEpD;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,IAAI,EAAE,YAAY;EAClBC,QAAQ,EAAEC,uBAAuB;EACjCC,YAAY,EAAE;IAACF,QAAQ,EAAEG;EAA8B,CAAC;EACxDC;AACF,CAAC;;AAED;AACA,SAASH,uBAAuB,CAACI,OAAO,EAAEd,EAAE,EAAEe,GAAG,EAAE;EACjD,MAAMC,IAAI,GAAG,IAAI;EAEjB,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnB,IAAIA,IAAI,KAAKd,KAAK,CAACe,WAAW,EAAE;MAC9B,MAAMC,KAAK,GAAGJ,IAAI,CAACK,cAAc;MAEjCpB,MAAM,CAACmB,KAAK,EAAE,sDAAsD,CAAC;MAErE,IAAI,CAACA,KAAK,CAACE,IAAI,EAAE;QACfR,OAAO,CAACS,KAAK,CAACjB,KAAK,CAACC,UAAU,EAAE;UAACiB,UAAU,EAAE;QAAI,CAAC,CAAC;QACnDJ,KAAK,CAACE,IAAI,GAAG,IAAI;MACnB;MAEAR,OAAO,CAACS,KAAK,CAACjB,KAAK,CAACmB,gBAAgB,CAAC;MACrCX,OAAO,CAACS,KAAK,CAACjB,KAAK,CAACoB,gBAAgB,CAAC;MACrCZ,OAAO,CAACa,OAAO,CAACT,IAAI,CAAC;MACrBJ,OAAO,CAACD,IAAI,CAACP,KAAK,CAACoB,gBAAgB,CAAC;MACpC,OAAOE,KAAK;IACd;IAEA,OAAOb,GAAG,CAACG,IAAI,CAAC;EAClB;;EAEA;EACA,SAASU,KAAK,CAACV,IAAI,EAAE;IACnB,IAAIf,aAAa,CAACe,IAAI,CAAC,EAAE;MACvBJ,OAAO,CAACS,KAAK,CAACjB,KAAK,CAACuB,0BAA0B,CAAC;MAC/Cf,OAAO,CAACa,OAAO,CAACT,IAAI,CAAC;MACrBJ,OAAO,CAACD,IAAI,CAACP,KAAK,CAACuB,0BAA0B,CAAC;MAC9Cf,OAAO,CAACD,IAAI,CAACP,KAAK,CAACmB,gBAAgB,CAAC;MACpC,OAAOzB,EAAE;IACX;IAEAc,OAAO,CAACD,IAAI,CAACP,KAAK,CAACmB,gBAAgB,CAAC;IACpC,OAAOzB,EAAE,CAACkB,IAAI,CAAC;EACjB;AACF;;AAEA;AACA,SAASN,8BAA8B,CAACE,OAAO,EAAEd,EAAE,EAAEe,GAAG,EAAE;EACxD,OAAOb,YAAY,CACjBY,OAAO,EACPA,OAAO,CAACgB,OAAO,CAACvB,UAAU,EAAEP,EAAE,EAAEe,GAAG,CAAC,EACpCT,KAAK,CAACyB,UAAU,EAChB,IAAI,CAACC,MAAM,CAACC,UAAU,CAACC,OAAO,CAACC,IAAI,CAACC,QAAQ,CAAC,cAAc,CAAC,GACxDC,SAAS,GACThC,SAAS,CAACiC,OAAO,CACtB;AACH;;AAEA;AACA,SAASzB,IAAI,CAACC,OAAO,EAAE;EACrBA,OAAO,CAACD,IAAI,CAACP,KAAK,CAACC,UAAU,CAAC;AAChC"},"metadata":{},"sourceType":"module","externalDependencies":[]}