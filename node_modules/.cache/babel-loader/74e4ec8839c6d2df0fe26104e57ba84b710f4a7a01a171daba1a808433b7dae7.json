{"ast":null,"code":"/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {\n    includeImageAlt = true\n  } = options || {};\n  return one(node, includeImageAlt);\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return node && typeof node === 'object' && (\n  // @ts-ignore looks like a literal.\n  node.value || (\n  // @ts-ignore looks like an image.\n  includeImageAlt ? node.alt : '') ||\n  // @ts-ignore looks like a parent.\n  'children' in node && all(node.children, includeImageAlt) || Array.isArray(node) && all(node, includeImageAlt)) || '';\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = [];\n  var index = -1;\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt);\n  }\n  return result.join('');\n}","map":{"version":3,"names":["toString","node","options","includeImageAlt","one","value","alt","all","children","Array","isArray","values","result","index","length","join"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/mdast-util-to-string/index.js"],"sourcesContent":["/**\n * @typedef Options\n * @property {boolean} [includeImageAlt=true]\n */\n\n/**\n * Get the text content of a node.\n * Prefer the node’s plain-text fields, otherwise serialize its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} node\n * @param {Options} [options]\n * @returns {string}\n */\nexport function toString(node, options) {\n  var {includeImageAlt = true} = options || {}\n  return one(node, includeImageAlt)\n}\n\n/**\n * @param {unknown} node\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction one(node, includeImageAlt) {\n  return (\n    (node &&\n      typeof node === 'object' &&\n      // @ts-ignore looks like a literal.\n      (node.value ||\n        // @ts-ignore looks like an image.\n        (includeImageAlt ? node.alt : '') ||\n        // @ts-ignore looks like a parent.\n        ('children' in node && all(node.children, includeImageAlt)) ||\n        (Array.isArray(node) && all(node, includeImageAlt)))) ||\n    ''\n  )\n}\n\n/**\n * @param {Array.<unknown>} values\n * @param {boolean} includeImageAlt\n * @returns {string}\n */\nfunction all(values, includeImageAlt) {\n  /** @type {Array.<string>} */\n  var result = []\n  var index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt)\n  }\n\n  return result.join('')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,QAAQ,CAACC,IAAI,EAAEC,OAAO,EAAE;EACtC,IAAI;IAACC,eAAe,GAAG;EAAI,CAAC,GAAGD,OAAO,IAAI,CAAC,CAAC;EAC5C,OAAOE,GAAG,CAACH,IAAI,EAAEE,eAAe,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,GAAG,CAACH,IAAI,EAAEE,eAAe,EAAE;EAClC,OACGF,IAAI,IACH,OAAOA,IAAI,KAAK,QAAQ;EACxB;EACCA,IAAI,CAACI,KAAK;EACT;EACCF,eAAe,GAAGF,IAAI,CAACK,GAAG,GAAG,EAAE,CAAC;EACjC;EACC,UAAU,IAAIL,IAAI,IAAIM,GAAG,CAACN,IAAI,CAACO,QAAQ,EAAEL,eAAe,CAAE,IAC1DM,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,IAAIM,GAAG,CAACN,IAAI,EAAEE,eAAe,CAAE,CAAC,IACxD,EAAE;AAEN;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASI,GAAG,CAACI,MAAM,EAAER,eAAe,EAAE;EACpC;EACA,IAAIS,MAAM,GAAG,EAAE;EACf,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEd,OAAO,EAAEA,KAAK,GAAGF,MAAM,CAACG,MAAM,EAAE;IAC9BF,MAAM,CAACC,KAAK,CAAC,GAAGT,GAAG,CAACO,MAAM,CAACE,KAAK,CAAC,EAAEV,eAAe,CAAC;EACrD;EAEA,OAAOS,MAAM,CAACG,IAAI,CAAC,EAAE,CAAC;AACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}