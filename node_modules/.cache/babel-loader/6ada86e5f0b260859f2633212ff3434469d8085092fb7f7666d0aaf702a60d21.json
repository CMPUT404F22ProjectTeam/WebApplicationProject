{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isScope;\nvar _generated = require(\"./generated\");\nfunction isScope(node, parent) {\n  if ((0, _generated.isBlockStatement)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent))) {\n    return false;\n  }\n  if ((0, _generated.isPattern)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent))) {\n    return true;\n  }\n  return (0, _generated.isScopable)(node);\n}","map":{"version":3,"mappings":";;;;;;AAAA;AAYe,SAASA,OAAO,CAACC,IAAY,EAAEC,MAAc,EAAW;EAGrE,IAAI,+BAAgB,EAACD,IAAI,CAAC,KAAK,yBAAU,EAACC,MAAM,CAAC,IAAI,4BAAa,EAACA,MAAM,CAAC,CAAC,EAAE;IAC3E,OAAO,KAAK;EACd;EAIA,IAAI,wBAAS,EAACD,IAAI,CAAC,KAAK,yBAAU,EAACC,MAAM,CAAC,IAAI,4BAAa,EAACA,MAAM,CAAC,CAAC,EAAE;IACpE,OAAO,IAAI;EACb;EAEA,OAAO,yBAAU,EAACD,IAAI,CAAC;AACzB","names":["isScope","node","parent"],"sources":["/home/charlotte/WebApplicationProject/node_modules/@babel/types/src/validators/isScope.ts"],"sourcesContent":["import {\n  isFunction,\n  isCatchClause,\n  isBlockStatement,\n  isScopable,\n  isPattern,\n} from \"./generated\";\nimport type * as t from \"..\";\n\n/**\n * Check if the input `node` is a scope.\n */\nexport default function isScope(node: t.Node, parent: t.Node): boolean {\n  // If a BlockStatement is an immediate descendent of a Function/CatchClause, it must be in the body.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isBlockStatement(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return false;\n  }\n\n  // If a Pattern is an immediate descendent of a Function/CatchClause, it must be in the params.\n  // Hence we skipped the parentKey === \"params\" check\n  if (isPattern(node) && (isFunction(parent) || isCatchClause(parent))) {\n    return true;\n  }\n\n  return isScopable(node);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}