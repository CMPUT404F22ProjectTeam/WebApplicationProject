{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n};\n\n/** @type {Tokenizer} */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter(types.labelLink);\n    effects.enter(types.labelMarker);\n    effects.consume(code);\n    effects.exit(types.labelMarker);\n    effects.exit(types.labelLink);\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n    /* Hidden footnotes hook. */\n    /* c8 ignore next 3 */\n    return code === codes.caret && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","codes","types","labelEnd","labelStartLink","name","tokenize","tokenizeLabelStartLink","resolveAll","effects","nok","self","start","code","leftSquareBracket","enter","labelLink","labelMarker","consume","exit","after","caret","parser","constructs"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/micromark-core-commonmark/dev/lib/label-start-link.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').State} State\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\nimport {labelEnd} from './label-end.js'\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  tokenize: tokenizeLabelStartLink,\n  resolveAll: labelEnd.resolveAll\n}\n\n/** @type {Tokenizer} */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this\n\n  return start\n\n  /** @type {State} */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter(types.labelLink)\n    effects.enter(types.labelMarker)\n    effects.consume(code)\n    effects.exit(types.labelMarker)\n    effects.exit(types.labelLink)\n    return after\n  }\n\n  /** @type {State} */\n  function after(code) {\n    /* To do: remove in the future once we’ve switched from\n     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n     * which doesn’t need this */\n    /* Hidden footnotes hook. */\n    /* c8 ignore next 3 */\n    return code === codes.caret &&\n      '_hiddenFootnoteSupport' in self.parser.constructs\n      ? nok(code)\n      : ok(code)\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,QAAQ,QAAO,gBAAgB;;AAEvC;AACA,OAAO,MAAMC,cAAc,GAAG;EAC5BC,IAAI,EAAE,gBAAgB;EACtBC,QAAQ,EAAEC,sBAAsB;EAChCC,UAAU,EAAEL,QAAQ,CAACK;AACvB,CAAC;;AAED;AACA,SAASD,sBAAsB,CAACE,OAAO,EAAEV,EAAE,EAAEW,GAAG,EAAE;EAChD,MAAMC,IAAI,GAAG,IAAI;EAEjB,OAAOC,KAAK;;EAEZ;EACA,SAASA,KAAK,CAACC,IAAI,EAAE;IACnBb,MAAM,CAACa,IAAI,KAAKZ,KAAK,CAACa,iBAAiB,EAAE,cAAc,CAAC;IACxDL,OAAO,CAACM,KAAK,CAACb,KAAK,CAACc,SAAS,CAAC;IAC9BP,OAAO,CAACM,KAAK,CAACb,KAAK,CAACe,WAAW,CAAC;IAChCR,OAAO,CAACS,OAAO,CAACL,IAAI,CAAC;IACrBJ,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACe,WAAW,CAAC;IAC/BR,OAAO,CAACU,IAAI,CAACjB,KAAK,CAACc,SAAS,CAAC;IAC7B,OAAOI,KAAK;EACd;;EAEA;EACA,SAASA,KAAK,CAACP,IAAI,EAAE;IACnB;AACJ;AACA;IACI;IACA;IACA,OAAOA,IAAI,KAAKZ,KAAK,CAACoB,KAAK,IACzB,wBAAwB,IAAIV,IAAI,CAACW,MAAM,CAACC,UAAU,GAChDb,GAAG,CAACG,IAAI,CAAC,GACTd,EAAE,CAACc,IAAI,CAAC;EACd;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}