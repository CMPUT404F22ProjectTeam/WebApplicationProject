{"ast":null,"code":"var register = require(\"./lib/register\");\nvar addHook = require(\"./lib/add\");\nvar removeHook = require(\"./lib/remove\");\n\n// bind with array of arguments: https://stackoverflow.com/a/21792913\nvar bind = Function.bind;\nvar bindable = bind.bind(bind);\nfunction bindApi(hook, state, name) {\n  var removeHookRef = bindable(removeHook, null).apply(null, name ? [state, name] : [state]);\n  hook.api = {\n    remove: removeHookRef\n  };\n  hook.remove = removeHookRef;\n  [\"before\", \"error\", \"after\", \"wrap\"].forEach(function (kind) {\n    var args = name ? [state, kind, name] : [state, kind];\n    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);\n  });\n}\nfunction HookSingular() {\n  var singularHookName = \"h\";\n  var singularHookState = {\n    registry: {}\n  };\n  var singularHook = register.bind(null, singularHookState, singularHookName);\n  bindApi(singularHook, singularHookState, singularHookName);\n  return singularHook;\n}\nfunction HookCollection() {\n  var state = {\n    registry: {}\n  };\n  var hook = register.bind(null, state);\n  bindApi(hook, state);\n  return hook;\n}\nvar collectionHookDeprecationMessageDisplayed = false;\nfunction Hook() {\n  if (!collectionHookDeprecationMessageDisplayed) {\n    console.warn('[before-after-hook]: \"Hook()\" repurposing warning, use \"Hook.Collection()\". Read more: https://git.io/upgrade-before-after-hook-to-1.4');\n    collectionHookDeprecationMessageDisplayed = true;\n  }\n  return HookCollection();\n}\nHook.Singular = HookSingular.bind();\nHook.Collection = HookCollection.bind();\nmodule.exports = Hook;\n// expose constructors as a named property for TypeScript\nmodule.exports.Hook = Hook;\nmodule.exports.Singular = Hook.Singular;\nmodule.exports.Collection = Hook.Collection;","map":{"version":3,"names":["register","require","addHook","removeHook","bind","Function","bindable","bindApi","hook","state","name","removeHookRef","apply","api","remove","forEach","kind","args","HookSingular","singularHookName","singularHookState","registry","singularHook","HookCollection","collectionHookDeprecationMessageDisplayed","Hook","console","warn","Singular","Collection","module","exports"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/before-after-hook/index.js"],"sourcesContent":["var register = require(\"./lib/register\");\nvar addHook = require(\"./lib/add\");\nvar removeHook = require(\"./lib/remove\");\n\n// bind with array of arguments: https://stackoverflow.com/a/21792913\nvar bind = Function.bind;\nvar bindable = bind.bind(bind);\n\nfunction bindApi(hook, state, name) {\n  var removeHookRef = bindable(removeHook, null).apply(\n    null,\n    name ? [state, name] : [state]\n  );\n  hook.api = { remove: removeHookRef };\n  hook.remove = removeHookRef;\n  [\"before\", \"error\", \"after\", \"wrap\"].forEach(function (kind) {\n    var args = name ? [state, kind, name] : [state, kind];\n    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);\n  });\n}\n\nfunction HookSingular() {\n  var singularHookName = \"h\";\n  var singularHookState = {\n    registry: {},\n  };\n  var singularHook = register.bind(null, singularHookState, singularHookName);\n  bindApi(singularHook, singularHookState, singularHookName);\n  return singularHook;\n}\n\nfunction HookCollection() {\n  var state = {\n    registry: {},\n  };\n\n  var hook = register.bind(null, state);\n  bindApi(hook, state);\n\n  return hook;\n}\n\nvar collectionHookDeprecationMessageDisplayed = false;\nfunction Hook() {\n  if (!collectionHookDeprecationMessageDisplayed) {\n    console.warn(\n      '[before-after-hook]: \"Hook()\" repurposing warning, use \"Hook.Collection()\". Read more: https://git.io/upgrade-before-after-hook-to-1.4'\n    );\n    collectionHookDeprecationMessageDisplayed = true;\n  }\n  return HookCollection();\n}\n\nHook.Singular = HookSingular.bind();\nHook.Collection = HookCollection.bind();\n\nmodule.exports = Hook;\n// expose constructors as a named property for TypeScript\nmodule.exports.Hook = Hook;\nmodule.exports.Singular = Hook.Singular;\nmodule.exports.Collection = Hook.Collection;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AACxC,IAAIC,OAAO,GAAGD,OAAO,CAAC,WAAW,CAAC;AAClC,IAAIE,UAAU,GAAGF,OAAO,CAAC,cAAc,CAAC;;AAExC;AACA,IAAIG,IAAI,GAAGC,QAAQ,CAACD,IAAI;AACxB,IAAIE,QAAQ,GAAGF,IAAI,CAACA,IAAI,CAACA,IAAI,CAAC;AAE9B,SAASG,OAAO,CAACC,IAAI,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAClC,IAAIC,aAAa,GAAGL,QAAQ,CAACH,UAAU,EAAE,IAAI,CAAC,CAACS,KAAK,CAClD,IAAI,EACJF,IAAI,GAAG,CAACD,KAAK,EAAEC,IAAI,CAAC,GAAG,CAACD,KAAK,CAAC,CAC/B;EACDD,IAAI,CAACK,GAAG,GAAG;IAAEC,MAAM,EAAEH;EAAc,CAAC;EACpCH,IAAI,CAACM,MAAM,GAAGH,aAAa;EAC3B,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAACI,OAAO,CAAC,UAAUC,IAAI,EAAE;IAC3D,IAAIC,IAAI,GAAGP,IAAI,GAAG,CAACD,KAAK,EAAEO,IAAI,EAAEN,IAAI,CAAC,GAAG,CAACD,KAAK,EAAEO,IAAI,CAAC;IACrDR,IAAI,CAACQ,IAAI,CAAC,GAAGR,IAAI,CAACK,GAAG,CAACG,IAAI,CAAC,GAAGV,QAAQ,CAACJ,OAAO,EAAE,IAAI,CAAC,CAACU,KAAK,CAAC,IAAI,EAAEK,IAAI,CAAC;EACzE,CAAC,CAAC;AACJ;AAEA,SAASC,YAAY,GAAG;EACtB,IAAIC,gBAAgB,GAAG,GAAG;EAC1B,IAAIC,iBAAiB,GAAG;IACtBC,QAAQ,EAAE,CAAC;EACb,CAAC;EACD,IAAIC,YAAY,GAAGtB,QAAQ,CAACI,IAAI,CAAC,IAAI,EAAEgB,iBAAiB,EAAED,gBAAgB,CAAC;EAC3EZ,OAAO,CAACe,YAAY,EAAEF,iBAAiB,EAAED,gBAAgB,CAAC;EAC1D,OAAOG,YAAY;AACrB;AAEA,SAASC,cAAc,GAAG;EACxB,IAAId,KAAK,GAAG;IACVY,QAAQ,EAAE,CAAC;EACb,CAAC;EAED,IAAIb,IAAI,GAAGR,QAAQ,CAACI,IAAI,CAAC,IAAI,EAAEK,KAAK,CAAC;EACrCF,OAAO,CAACC,IAAI,EAAEC,KAAK,CAAC;EAEpB,OAAOD,IAAI;AACb;AAEA,IAAIgB,yCAAyC,GAAG,KAAK;AACrD,SAASC,IAAI,GAAG;EACd,IAAI,CAACD,yCAAyC,EAAE;IAC9CE,OAAO,CAACC,IAAI,CACV,wIAAwI,CACzI;IACDH,yCAAyC,GAAG,IAAI;EAClD;EACA,OAAOD,cAAc,EAAE;AACzB;AAEAE,IAAI,CAACG,QAAQ,GAAGV,YAAY,CAACd,IAAI,EAAE;AACnCqB,IAAI,CAACI,UAAU,GAAGN,cAAc,CAACnB,IAAI,EAAE;AAEvC0B,MAAM,CAACC,OAAO,GAAGN,IAAI;AACrB;AACAK,MAAM,CAACC,OAAO,CAACN,IAAI,GAAGA,IAAI;AAC1BK,MAAM,CAACC,OAAO,CAACH,QAAQ,GAAGH,IAAI,CAACG,QAAQ;AACvCE,MAAM,CAACC,OAAO,CAACF,UAAU,GAAGJ,IAAI,CAACI,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}