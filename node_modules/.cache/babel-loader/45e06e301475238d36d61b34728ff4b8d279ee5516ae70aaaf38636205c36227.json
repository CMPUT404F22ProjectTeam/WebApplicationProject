{"ast":null,"code":"/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.3';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = (a => {\n  let tab = {};\n  a.forEach((c, i) => tab[c] = i);\n  return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function' ? Uint8Array.from.bind(Uint8Array) : function (it) {\n  let fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x => x;\n  return new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\n};\nconst _mkUriSafe = src => src.replace(/=/g, '').replace(/[+\\/]/g, m0 => m0 == '+' ? '-' : '_');\nconst _tidyB64 = s => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = bin => {\n  // console.log('polyfilled');\n  let u32,\n    c0,\n    c1,\n    c2,\n    asc = '';\n  const pad = bin.length % 3;\n  for (let i = 0; i < bin.length;) {\n    if ((c0 = bin.charCodeAt(i++)) > 255 || (c1 = bin.charCodeAt(i++)) > 255 || (c2 = bin.charCodeAt(i++)) > 255) throw new TypeError('invalid character found');\n    u32 = c0 << 16 | c1 << 8 | c2;\n    asc += b64chs[u32 >> 18 & 63] + b64chs[u32 >> 12 & 63] + b64chs[u32 >> 6 & 63] + b64chs[u32 & 63];\n  }\n  return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? bin => btoa(bin) : _hasBuffer ? bin => Buffer.from(bin, 'binary').toString('base64') : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer ? u8a => Buffer.from(u8a).toString('base64') : u8a => {\n  // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n  const maxargs = 0x1000;\n  let strs = [];\n  for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n    strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n  }\n  return _btoa(strs.join(''));\n};\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = function (u8a) {\n  let urlsafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n};\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = c => {\n  if (c.length < 2) {\n    var cc = c.charCodeAt(0);\n    return cc < 0x80 ? c : cc < 0x800 ? _fromCC(0xc0 | cc >>> 6) + _fromCC(0x80 | cc & 0x3f) : _fromCC(0xe0 | cc >>> 12 & 0x0f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  } else {\n    var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n    return _fromCC(0xf0 | cc >>> 18 & 0x07) + _fromCC(0x80 | cc >>> 12 & 0x3f) + _fromCC(0x80 | cc >>> 6 & 0x3f) + _fromCC(0x80 | cc & 0x3f);\n  }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = u => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer ? s => Buffer.from(s, 'utf8').toString('base64') : _TE ? s => _fromUint8Array(_TE.encode(s)) : s => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = function (src) {\n  let urlsafe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return urlsafe ? _mkUriSafe(_encode(src)) : _encode(src);\n};\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\nconst encodeURI = src => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = cccc => {\n  switch (cccc.length) {\n    case 4:\n      var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),\n        offset = cp - 0x10000;\n      return _fromCC((offset >>> 10) + 0xD800) + _fromCC((offset & 0x3FF) + 0xDC00);\n    case 3:\n      return _fromCC((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n    default:\n      return _fromCC((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n  }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = b => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = asc => {\n  // console.log('polyfilled');\n  asc = asc.replace(/\\s+/g, '');\n  if (!b64re.test(asc)) throw new TypeError('malformed base64.');\n  asc += '=='.slice(2 - (asc.length & 3));\n  let u24,\n    bin = '',\n    r1,\n    r2;\n  for (let i = 0; i < asc.length;) {\n    u24 = b64tab[asc.charAt(i++)] << 18 | b64tab[asc.charAt(i++)] << 12 | (r1 = b64tab[asc.charAt(i++)]) << 6 | (r2 = b64tab[asc.charAt(i++)]);\n    bin += r1 === 64 ? _fromCC(u24 >> 16 & 255) : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255) : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n  }\n  return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? asc => atob(_tidyB64(asc)) : _hasBuffer ? asc => Buffer.from(asc, 'base64').toString('binary') : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer ? a => _U8Afrom(Buffer.from(a, 'base64')) : a => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = a => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer ? a => Buffer.from(a, 'base64').toString('utf8') : _TD ? a => _TD.decode(_toUint8Array(a)) : a => btou(_atob(a));\nconst _unURI = a => _tidyB64(a.replace(/[-_]/g, m0 => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = src => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = src => {\n  if (typeof src !== 'string') return false;\n  const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n  return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = v => {\n  return {\n    value: v,\n    enumerable: false,\n    writable: true,\n    configurable: true\n  };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n  const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n  _add('fromBase64', function () {\n    return decode(this);\n  });\n  _add('toBase64', function (urlsafe) {\n    return encode(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return encode(this, true);\n  });\n  _add('toBase64URL', function () {\n    return encode(this, true);\n  });\n  _add('toUint8Array', function () {\n    return toUint8Array(this);\n  });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n  const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n  _add('toBase64', function (urlsafe) {\n    return fromUint8Array(this, urlsafe);\n  });\n  _add('toBase64URI', function () {\n    return fromUint8Array(this, true);\n  });\n  _add('toBase64URL', function () {\n    return fromUint8Array(this, true);\n  });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n  extendString();\n  extendUint8Array();\n};\nconst gBase64 = {\n  version: version,\n  VERSION: VERSION,\n  atob: _atob,\n  atobPolyfill: atobPolyfill,\n  btoa: _btoa,\n  btoaPolyfill: btoaPolyfill,\n  fromBase64: decode,\n  toBase64: encode,\n  encode: encode,\n  encodeURI: encodeURI,\n  encodeURL: encodeURI,\n  utob: utob,\n  btou: btou,\n  decode: decode,\n  isValid: isValid,\n  fromUint8Array: fromUint8Array,\n  toUint8Array: toUint8Array,\n  extendString: extendString,\n  extendUint8Array: extendUint8Array,\n  extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };","map":{"version":3,"names":["version","VERSION","_hasatob","atob","_hasbtoa","btoa","_hasBuffer","Buffer","_TD","TextDecoder","undefined","_TE","TextEncoder","b64ch","b64chs","Array","prototype","slice","call","b64tab","a","tab","forEach","c","i","b64re","_fromCC","String","fromCharCode","bind","_U8Afrom","Uint8Array","from","it","fn","x","map","_mkUriSafe","src","replace","m0","_tidyB64","s","btoaPolyfill","bin","u32","c0","c1","c2","asc","pad","length","charCodeAt","TypeError","substring","_btoa","toString","_fromUint8Array","u8a","maxargs","strs","l","push","apply","subarray","join","fromUint8Array","urlsafe","cb_utob","cc","re_utob","utob","u","_encode","encode","encodeURI","re_btou","cb_btou","cccc","cp","offset","btou","b","atobPolyfill","test","u24","r1","r2","charAt","_atob","_toUint8Array","toUint8Array","_unURI","_decode","decode","isValid","_noEnum","v","value","enumerable","writable","configurable","extendString","_add","name","body","Object","defineProperty","extendUint8Array","extendBuiltins","gBase64","fromBase64","toBase64","encodeURL","Base64"],"sources":["/Users/heyuting/404lab/404_project/WebApplicationProject/node_modules/js-base64/base64.mjs"],"sourcesContent":["/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.3';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 ยง5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 ยง5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}