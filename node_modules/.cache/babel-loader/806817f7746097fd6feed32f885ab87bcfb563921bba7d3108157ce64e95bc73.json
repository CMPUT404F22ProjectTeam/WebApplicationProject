{"ast":null,"code":"\"use strict\";\n\nvar _utils = require(\"./utils\");\nconst defineType = (0, _utils.defineAliasedType)(\"Flow\");\nconst defineInterfaceishType = name => {\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\"id\", \"typeParameters\", \"extends\", \"mixins\", \"implements\", \"body\"],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: (0, _utils.validateType)(\"Identifier\"),\n      typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterDeclaration\"),\n      extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"InterfaceExtends\")),\n      mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"InterfaceExtends\")),\n      implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"ClassImplements\")),\n      body: (0, _utils.validateType)(\"ObjectTypeAnnotation\")\n    }\n  });\n};\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterInstantiation\")\n  }\n});\ndefineInterfaceishType(\"DeclareClass\");\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    predicate: (0, _utils.validateOptionalType)(\"DeclaredPredicate\")\n  }\n});\ndefineInterfaceishType(\"DeclareInterface\");\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    body: (0, _utils.validateType)(\"BlockStatement\"),\n    kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\"CommonJS\", \"ES\"))\n  }\n});\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"TypeAnnotation\")\n  }\n});\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterDeclaration\"),\n    right: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterDeclaration\"),\n    supertype: (0, _utils.validateOptionalType)(\"FlowType\"),\n    impltype: (0, _utils.validateOptionalType)(\"FlowType\")\n  }\n});\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: (0, _utils.validateOptionalType)(\"Flow\"),\n    specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"])),\n    source: (0, _utils.validateOptionalType)(\"StringLiteral\"),\n    default: (0, _utils.validateOptional)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: (0, _utils.validateType)(\"StringLiteral\"),\n    exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)(\"type\", \"value\"))\n  }\n});\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: (0, _utils.validateType)(\"Flow\")\n  }\n});\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"]\n});\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterDeclaration\"),\n    params: (0, _utils.validate)((0, _utils.arrayOfType)(\"FunctionTypeParam\")),\n    rest: (0, _utils.validateOptionalType)(\"FunctionTypeParam\"),\n    this: (0, _utils.validateOptionalType)(\"FunctionTypeParam\"),\n    returnType: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: (0, _utils.validateOptionalType)(\"Identifier\"),\n    typeAnnotation: (0, _utils.validateType)(\"FlowType\"),\n    optional: (0, _utils.validateOptional)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterInstantiation\")\n  }\n});\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"]\n});\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: (0, _utils.validateType)([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterInstantiation\")\n  }\n});\ndefineInterfaceishType(\"InterfaceDeclaration\");\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)(\"InterfaceExtends\")),\n    body: (0, _utils.validateType)(\"ObjectTypeAnnotation\")\n  }\n});\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: (0, _utils.validate)((0, _utils.arrayOfType)(\"FlowType\"))\n  }\n});\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: (0, _utils.validate)((0, _utils.assertValueType)(\"number\"))\n  }\n});\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\", \"exact\"],\n  fields: {\n    properties: (0, _utils.validate)((0, _utils.arrayOfType)([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"])),\n    indexers: {\n      validate: (0, _utils.arrayOfType)(\"ObjectTypeIndexer\"),\n      optional: true,\n      default: []\n    },\n    callProperties: {\n      validate: (0, _utils.arrayOfType)(\"ObjectTypeCallProperty\"),\n      optional: true,\n      default: []\n    },\n    internalSlots: {\n      validate: (0, _utils.arrayOfType)(\"ObjectTypeInternalSlot\"),\n      optional: true,\n      default: []\n    },\n    exact: {\n      validate: (0, _utils.assertValueType)(\"boolean\"),\n      default: false\n    },\n    inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    value: (0, _utils.validateType)(\"FlowType\"),\n    optional: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    static: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    method: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: (0, _utils.validateType)(\"FlowType\"),\n    static: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: (0, _utils.validateOptionalType)(\"Identifier\"),\n    key: (0, _utils.validateType)(\"FlowType\"),\n    value: (0, _utils.validateType)(\"FlowType\"),\n    static: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    variance: (0, _utils.validateOptionalType)(\"Variance\")\n  }\n});\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: (0, _utils.validateType)([\"Identifier\", \"StringLiteral\"]),\n    value: (0, _utils.validateType)(\"FlowType\"),\n    kind: (0, _utils.validate)((0, _utils.assertOneOf)(\"init\", \"get\", \"set\")),\n    static: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    proto: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    optional: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    variance: (0, _utils.validateOptionalType)(\"Variance\"),\n    method: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterDeclaration\"),\n    supertype: (0, _utils.validateOptionalType)(\"FlowType\"),\n    impltype: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    qualification: (0, _utils.validateType)([\"Identifier\", \"QualifiedTypeIdentifier\"])\n  }\n});\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: (0, _utils.validate)((0, _utils.assertValueType)(\"string\"))\n  }\n});\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: (0, _utils.validate)((0, _utils.arrayOfType)(\"FlowType\"))\n  }\n});\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    typeParameters: (0, _utils.validateOptionalType)(\"TypeParameterDeclaration\"),\n    right: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: (0, _utils.validateType)(\"Expression\"),\n    typeAnnotation: (0, _utils.validateType)(\"TypeAnnotation\")\n  }\n});\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: (0, _utils.validate)((0, _utils.assertValueType)(\"string\")),\n    bound: (0, _utils.validateOptionalType)(\"TypeAnnotation\"),\n    default: (0, _utils.validateOptionalType)(\"FlowType\"),\n    variance: (0, _utils.validateOptionalType)(\"Variance\")\n  }\n});\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: (0, _utils.validate)((0, _utils.arrayOfType)(\"TypeParameter\"))\n  }\n});\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: (0, _utils.validate)((0, _utils.arrayOfType)(\"FlowType\"))\n  }\n});\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: (0, _utils.validate)((0, _utils.arrayOfType)(\"FlowType\"))\n  }\n});\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: (0, _utils.validate)((0, _utils.assertOneOf)(\"minus\", \"plus\"))\n  }\n});\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"]\n});\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    body: (0, _utils.validateType)([\"EnumBooleanBody\", \"EnumNumberBody\", \"EnumStringBody\", \"EnumSymbolBody\"])\n  }\n});\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    members: (0, _utils.validateArrayOfType)(\"EnumBooleanMember\"),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    members: (0, _utils.validateArrayOfType)(\"EnumNumberMember\"),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\")),\n    members: (0, _utils.validateArrayOfType)([\"EnumStringMember\", \"EnumDefaultedMember\"]),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: (0, _utils.validateArrayOfType)(\"EnumDefaultedMember\"),\n    hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    init: (0, _utils.validateType)(\"BooleanLiteral\")\n  }\n});\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    init: (0, _utils.validateType)(\"NumericLiteral\")\n  }\n});\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\"),\n    init: (0, _utils.validateType)(\"StringLiteral\")\n  }\n});\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: (0, _utils.validateType)(\"Identifier\")\n  }\n});\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"FlowType\"),\n    indexType: (0, _utils.validateType)(\"FlowType\")\n  }\n});\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: (0, _utils.validateType)(\"FlowType\"),\n    indexType: (0, _utils.validateType)(\"FlowType\"),\n    optional: (0, _utils.validate)((0, _utils.assertValueType)(\"boolean\"))\n  }\n});","map":{"version":3,"mappings":"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","names":["defineType","defineInterfaceishType","name","builder","visitor","aliases","fields","id","typeParameters","extends","mixins","implements","body","elementType","value","predicate","kind","typeAnnotation","right","supertype","impltype","declaration","specifiers","source","default","exportKind","params","rest","this","returnType","optional","types","properties","indexers","validate","callProperties","internalSlots","exact","inexact","static","method","key","variance","proto","argument","qualification","expression","bound","explicitType","members","hasUnknownMembers","init","objectType","indexType"],"sources":["/home/charlotte/WebApplicationProject/node_modules/@babel/types/src/definitions/flow.ts"],"sourcesContent":["import {\n  defineAliasedType,\n  arrayOfType,\n  assertOneOf,\n  assertValueType,\n  validate,\n  validateArrayOfType,\n  validateOptional,\n  validateOptionalType,\n  validateType,\n} from \"./utils\";\n\nconst defineType = defineAliasedType(\"Flow\");\n\nconst defineInterfaceishType = (\n  name: \"DeclareClass\" | \"DeclareInterface\" | \"InterfaceDeclaration\",\n) => {\n  defineType(name, {\n    builder: [\"id\", \"typeParameters\", \"extends\", \"body\"],\n    visitor: [\n      \"id\",\n      \"typeParameters\",\n      \"extends\",\n      \"mixins\",\n      \"implements\",\n      \"body\",\n    ],\n    aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n    fields: {\n      id: validateType(\"Identifier\"),\n      typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n      extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      mixins: validateOptional(arrayOfType(\"InterfaceExtends\")),\n      implements: validateOptional(arrayOfType(\"ClassImplements\")),\n      body: validateType(\"ObjectTypeAnnotation\"),\n    },\n  });\n};\n\ndefineType(\"AnyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ArrayTypeAnnotation\", {\n  visitor: [\"elementType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    elementType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"BooleanTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"BooleanLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"NullLiteralTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ClassImplements\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareClass\");\n\ndefineType(\"DeclareFunction\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    predicate: validateOptionalType(\"DeclaredPredicate\"),\n  },\n});\n\ndefineInterfaceishType(\"DeclareInterface\");\n\ndefineType(\"DeclareModule\", {\n  builder: [\"id\", \"body\", \"kind\"],\n  visitor: [\"id\", \"body\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType([\"Identifier\", \"StringLiteral\"]),\n    body: validateType(\"BlockStatement\"),\n    kind: validateOptional(assertOneOf(\"CommonJS\", \"ES\")),\n  },\n});\n\ndefineType(\"DeclareModuleExports\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"DeclareTypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareOpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateOptionalType(\"FlowType\"),\n  },\n});\n\ndefineType(\"DeclareVariable\", {\n  visitor: [\"id\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"DeclareExportDeclaration\", {\n  visitor: [\"declaration\", \"specifiers\", \"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    declaration: validateOptionalType(\"Flow\"),\n    specifiers: validateOptional(\n      arrayOfType([\"ExportSpecifier\", \"ExportNamespaceSpecifier\"]),\n    ),\n    source: validateOptionalType(\"StringLiteral\"),\n    default: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"DeclareExportAllDeclaration\", {\n  visitor: [\"source\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    source: validateType(\"StringLiteral\"),\n    exportKind: validateOptional(assertOneOf(\"type\", \"value\")),\n  },\n});\n\ndefineType(\"DeclaredPredicate\", {\n  visitor: [\"value\"],\n  aliases: [\"FlowPredicate\"],\n  fields: {\n    value: validateType(\"Flow\"),\n  },\n});\n\ndefineType(\"ExistsTypeAnnotation\", {\n  aliases: [\"FlowType\"],\n});\n\ndefineType(\"FunctionTypeAnnotation\", {\n  visitor: [\"typeParameters\", \"params\", \"rest\", \"returnType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    params: validate(arrayOfType(\"FunctionTypeParam\")),\n    rest: validateOptionalType(\"FunctionTypeParam\"),\n    this: validateOptionalType(\"FunctionTypeParam\"),\n    returnType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"FunctionTypeParam\", {\n  visitor: [\"name\", \"typeAnnotation\"],\n  fields: {\n    name: validateOptionalType(\"Identifier\"),\n    typeAnnotation: validateType(\"FlowType\"),\n    optional: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"GenericTypeAnnotation\", {\n  visitor: [\"id\", \"typeParameters\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineType(\"InferredPredicate\", {\n  aliases: [\"FlowPredicate\"],\n});\n\ndefineType(\"InterfaceExtends\", {\n  visitor: [\"id\", \"typeParameters\"],\n  fields: {\n    id: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n    typeParameters: validateOptionalType(\"TypeParameterInstantiation\"),\n  },\n});\n\ndefineInterfaceishType(\"InterfaceDeclaration\");\n\ndefineType(\"InterfaceTypeAnnotation\", {\n  visitor: [\"extends\", \"body\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    extends: validateOptional(arrayOfType(\"InterfaceExtends\")),\n    body: validateType(\"ObjectTypeAnnotation\"),\n  },\n});\n\ndefineType(\"IntersectionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"MixedTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"EmptyTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"NullableTypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"NumberLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"number\")),\n  },\n});\n\ndefineType(\"NumberTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ObjectTypeAnnotation\", {\n  visitor: [\"properties\", \"indexers\", \"callProperties\", \"internalSlots\"],\n  aliases: [\"FlowType\"],\n  builder: [\n    \"properties\",\n    \"indexers\",\n    \"callProperties\",\n    \"internalSlots\",\n    \"exact\",\n  ],\n  fields: {\n    properties: validate(\n      arrayOfType([\"ObjectTypeProperty\", \"ObjectTypeSpreadProperty\"]),\n    ),\n    indexers: {\n      validate: arrayOfType(\"ObjectTypeIndexer\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    callProperties: {\n      validate: arrayOfType(\"ObjectTypeCallProperty\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    internalSlots: {\n      validate: arrayOfType(\"ObjectTypeInternalSlot\"),\n      optional: process.env.BABEL_8_BREAKING ? false : true,\n      default: [],\n    },\n    exact: {\n      validate: assertValueType(\"boolean\"),\n      default: false,\n    },\n    // If the inexact flag is present then this is an object type, and not a\n    // declare class, declare interface, or interface. If it is true, the\n    // object uses ... to express that it is inexact.\n    inexact: validateOptional(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeInternalSlot\", {\n  visitor: [\"id\", \"value\", \"optional\", \"static\", \"method\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    value: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n    static: validate(assertValueType(\"boolean\")),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeCallProperty\", {\n  visitor: [\"value\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeIndexer\", {\n  visitor: [\"id\", \"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    id: validateOptionalType(\"Identifier\"),\n    key: validateType(\"FlowType\"),\n    value: validateType(\"FlowType\"),\n    static: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"ObjectTypeProperty\", {\n  visitor: [\"key\", \"value\", \"variance\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    key: validateType([\"Identifier\", \"StringLiteral\"]),\n    value: validateType(\"FlowType\"),\n    kind: validate(assertOneOf(\"init\", \"get\", \"set\")),\n    static: validate(assertValueType(\"boolean\")),\n    proto: validate(assertValueType(\"boolean\")),\n    optional: validate(assertValueType(\"boolean\")),\n    variance: validateOptionalType(\"Variance\"),\n    method: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"ObjectTypeSpreadProperty\", {\n  visitor: [\"argument\"],\n  aliases: [\"UserWhitespacable\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OpaqueType\", {\n  visitor: [\"id\", \"typeParameters\", \"supertype\", \"impltype\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    supertype: validateOptionalType(\"FlowType\"),\n    impltype: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"QualifiedTypeIdentifier\", {\n  visitor: [\"id\", \"qualification\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    qualification: validateType([\"Identifier\", \"QualifiedTypeIdentifier\"]),\n  },\n});\n\ndefineType(\"StringLiteralTypeAnnotation\", {\n  builder: [\"value\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    value: validate(assertValueType(\"string\")),\n  },\n});\n\ndefineType(\"StringTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"SymbolTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"ThisTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\ndefineType(\"TupleTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"TypeofTypeAnnotation\", {\n  visitor: [\"argument\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    argument: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAlias\", {\n  visitor: [\"id\", \"typeParameters\", \"right\"],\n  aliases: [\"FlowDeclaration\", \"Statement\", \"Declaration\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    typeParameters: validateOptionalType(\"TypeParameterDeclaration\"),\n    right: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeAnnotation\", {\n  visitor: [\"typeAnnotation\"],\n  fields: {\n    typeAnnotation: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"TypeCastExpression\", {\n  visitor: [\"expression\", \"typeAnnotation\"],\n  aliases: [\"ExpressionWrapper\", \"Expression\"],\n  fields: {\n    expression: validateType(\"Expression\"),\n    typeAnnotation: validateType(\"TypeAnnotation\"),\n  },\n});\n\ndefineType(\"TypeParameter\", {\n  visitor: [\"bound\", \"default\", \"variance\"],\n  fields: {\n    name: validate(assertValueType(\"string\")),\n    bound: validateOptionalType(\"TypeAnnotation\"),\n    default: validateOptionalType(\"FlowType\"),\n    variance: validateOptionalType(\"Variance\"),\n  },\n});\n\ndefineType(\"TypeParameterDeclaration\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"TypeParameter\")),\n  },\n});\n\ndefineType(\"TypeParameterInstantiation\", {\n  visitor: [\"params\"],\n  fields: {\n    params: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"UnionTypeAnnotation\", {\n  visitor: [\"types\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    types: validate(arrayOfType(\"FlowType\")),\n  },\n});\n\ndefineType(\"Variance\", {\n  builder: [\"kind\"],\n  fields: {\n    kind: validate(assertOneOf(\"minus\", \"plus\")),\n  },\n});\n\ndefineType(\"VoidTypeAnnotation\", {\n  aliases: [\"FlowType\", \"FlowBaseAnnotation\"],\n});\n\n// Enums\ndefineType(\"EnumDeclaration\", {\n  aliases: [\"Statement\", \"Declaration\"],\n  visitor: [\"id\", \"body\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    body: validateType([\n      \"EnumBooleanBody\",\n      \"EnumNumberBody\",\n      \"EnumStringBody\",\n      \"EnumSymbolBody\",\n    ]),\n  },\n});\n\ndefineType(\"EnumBooleanBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumBooleanMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumNumberBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType(\"EnumNumberMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumStringBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    explicitType: validate(assertValueType(\"boolean\")),\n    members: validateArrayOfType([\"EnumStringMember\", \"EnumDefaultedMember\"]),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumSymbolBody\", {\n  aliases: [\"EnumBody\"],\n  visitor: [\"members\"],\n  fields: {\n    members: validateArrayOfType(\"EnumDefaultedMember\"),\n    hasUnknownMembers: validate(assertValueType(\"boolean\")),\n  },\n});\n\ndefineType(\"EnumBooleanMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"BooleanLiteral\"),\n  },\n});\n\ndefineType(\"EnumNumberMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"NumericLiteral\"),\n  },\n});\n\ndefineType(\"EnumStringMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\", \"init\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n    init: validateType(\"StringLiteral\"),\n  },\n});\n\ndefineType(\"EnumDefaultedMember\", {\n  aliases: [\"EnumMember\"],\n  visitor: [\"id\"],\n  fields: {\n    id: validateType(\"Identifier\"),\n  },\n});\n\ndefineType(\"IndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n  },\n});\n\ndefineType(\"OptionalIndexedAccessType\", {\n  visitor: [\"objectType\", \"indexType\"],\n  aliases: [\"FlowType\"],\n  fields: {\n    objectType: validateType(\"FlowType\"),\n    indexType: validateType(\"FlowType\"),\n    optional: validate(assertValueType(\"boolean\")),\n  },\n});\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}