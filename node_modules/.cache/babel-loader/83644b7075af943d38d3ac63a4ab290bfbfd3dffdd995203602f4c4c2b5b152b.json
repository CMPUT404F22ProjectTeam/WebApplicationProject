{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cloneNode;\nvar _definitions = require(\"../definitions\");\nvar _generated = require(\"../validators/generated\");\nconst has = Function.call.bind(Object.prototype.hasOwnProperty);\nfunction cloneIfNode(obj, deep, withoutLoc, commentsCache) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n  return obj;\n}\nfunction cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\nfunction cloneNode(node) {\n  let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let withoutLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\nfunction cloneNodeInternal(node) {\n  let deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let withoutLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let commentsCache = arguments.length > 3 ? arguments[3] : undefined;\n  if (!node) return node;\n  const {\n    type\n  } = node;\n  const newNode = {\n    type: node.type\n  };\n  if ((0, _generated.isIdentifier)(node)) {\n    newNode.name = node.name;\n    if (has(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n    if (has(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation;\n    }\n  } else if (!has(_definitions.NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(_definitions.NODE_FIELDS[type])) {\n      if (has(node, field)) {\n        if (deep) {\n          newNode[field] = (0, _generated.isFile)(node) && field === \"comments\" ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache);\n        } else {\n          newNode[field] = node[field];\n        }\n      }\n    }\n  }\n  if (has(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (has(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache);\n  }\n  if (has(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache);\n  }\n  if (has(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache);\n  }\n  if (has(node, \"extra\")) {\n    newNode.extra = Object.assign({}, node.extra);\n  }\n  return newNode;\n}\nfunction maybeCloneComments(comments, deep, withoutLoc, commentsCache) {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n    const {\n      type,\n      value,\n      loc\n    } = comment;\n    const ret = {\n      type,\n      value,\n      loc\n    };\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n    commentsCache.set(comment, ret);\n    return ret;\n  });\n}","map":{"version":3,"mappings":"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","names":["has","Function","call","bind","Object","prototype","hasOwnProperty","cloneIfNode","obj","deep","withoutLoc","commentsCache","type","cloneNodeInternal","cloneIfNodeOrArray","Array","isArray","map","node","cloneNode","Map","newNode","name","optional","typeAnnotation","NODE_FIELDS","Error","field","keys","maybeCloneComments","comments","loc","leadingComments","innerComments","trailingComments","extra","comment","cache","get","value","ret","set"],"sources":["/home/charlotte/WebApplicationProject/node_modules/@babel/types/src/clone/cloneNode.ts"],"sourcesContent":["import { NODE_FIELDS } from \"../definitions\";\nimport type * as t from \"..\";\nimport { isFile, isIdentifier } from \"../validators/generated\";\n\nconst has = Function.call.bind(Object.prototype.hasOwnProperty);\n\ntype CommentCache = Map<t.Comment, t.Comment>;\n\n// This function will never be called for comments, only for real nodes.\nfunction cloneIfNode(\n  obj: t.Node | undefined | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (obj && typeof obj.type === \"string\") {\n    return cloneNodeInternal(obj, deep, withoutLoc, commentsCache);\n  }\n\n  return obj;\n}\n\nfunction cloneIfNodeOrArray(\n  obj: t.Node | undefined | null | (t.Node | undefined | null)[],\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: CommentCache,\n) {\n  if (Array.isArray(obj)) {\n    return obj.map(node => cloneIfNode(node, deep, withoutLoc, commentsCache));\n  }\n  return cloneIfNode(obj, deep, withoutLoc, commentsCache);\n}\n\n/**\n * Create a clone of a `node` including only properties belonging to the node.\n * If the second parameter is `false`, cloneNode performs a shallow clone.\n * If the third parameter is true, the cloned nodes exclude location properties.\n */\nexport default function cloneNode<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n): T {\n  return cloneNodeInternal(node, deep, withoutLoc, new Map());\n}\n\nfunction cloneNodeInternal<T extends t.Node>(\n  node: T,\n  deep: boolean = true,\n  withoutLoc: boolean = false,\n  commentsCache: CommentCache,\n): T {\n  if (!node) return node;\n\n  const { type } = node;\n  const newNode: any = { type: node.type };\n\n  // Special-case identifiers since they are the most cloned nodes.\n  if (isIdentifier(node)) {\n    newNode.name = node.name;\n\n    if (has(node, \"optional\") && typeof node.optional === \"boolean\") {\n      newNode.optional = node.optional;\n    }\n\n    if (has(node, \"typeAnnotation\")) {\n      newNode.typeAnnotation = deep\n        ? cloneIfNodeOrArray(\n            node.typeAnnotation,\n            true,\n            withoutLoc,\n            commentsCache,\n          )\n        : node.typeAnnotation;\n    }\n  } else if (!has(NODE_FIELDS, type)) {\n    throw new Error(`Unknown node type: \"${type}\"`);\n  } else {\n    for (const field of Object.keys(NODE_FIELDS[type])) {\n      if (has(node, field)) {\n        if (deep) {\n          newNode[field] =\n            isFile(node) && field === \"comments\"\n              ? maybeCloneComments(\n                  node.comments,\n                  deep,\n                  withoutLoc,\n                  commentsCache,\n                )\n              : cloneIfNodeOrArray(\n                  // @ts-expect-error node[field] has been guarded by has check\n                  node[field],\n                  true,\n                  withoutLoc,\n                  commentsCache,\n                );\n        } else {\n          newNode[field] =\n            // @ts-expect-error node[field] has been guarded by has check\n            node[field];\n        }\n      }\n    }\n  }\n\n  if (has(node, \"loc\")) {\n    if (withoutLoc) {\n      newNode.loc = null;\n    } else {\n      newNode.loc = node.loc;\n    }\n  }\n  if (has(node, \"leadingComments\")) {\n    newNode.leadingComments = maybeCloneComments(\n      node.leadingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (has(node, \"innerComments\")) {\n    newNode.innerComments = maybeCloneComments(\n      node.innerComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (has(node, \"trailingComments\")) {\n    newNode.trailingComments = maybeCloneComments(\n      node.trailingComments,\n      deep,\n      withoutLoc,\n      commentsCache,\n    );\n  }\n  if (has(node, \"extra\")) {\n    newNode.extra = {\n      ...node.extra,\n    };\n  }\n\n  return newNode;\n}\n\nfunction maybeCloneComments<T extends t.Comment>(\n  comments: ReadonlyArray<T> | null,\n  deep: boolean,\n  withoutLoc: boolean,\n  commentsCache: Map<T, T>,\n): ReadonlyArray<T> | null {\n  if (!comments || !deep) {\n    return comments;\n  }\n  return comments.map(comment => {\n    const cache = commentsCache.get(comment);\n    if (cache) return cache;\n\n    const { type, value, loc } = comment;\n\n    const ret = { type, value, loc } as T;\n    if (withoutLoc) {\n      ret.loc = null;\n    }\n\n    commentsCache.set(comment, ret);\n\n    return ret;\n  });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}